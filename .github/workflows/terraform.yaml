name: "Terraform"

on:
  push:
    branches:
      - main
    paths:
      - lambdas

jobs:
  build_go:
    name: "Build Go Files Zip"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Verify Changed Files
        id: verify-changed-files
        run: |
          echo 'flag=false' >> $GITHUB_ENV
          git checkout
          for d in lambdas/*/ ; do
            if git diff --quiet HEAD^ HEAD -- $d; then
              echo "Skipping unchanged lambda $d"
            else
              echo "flag=true" >> $GITHUB_ENV
              echo "Building changed lambda $d"
              cd $d
              go build -o ../../builds/$(basename $d)
              cd ../..            
            fi
          echo "$GITHUB_ENV"
          done

      - name: Zip Lambda
        if: ${{ env.flag == 'true' }}
        run: |
          cd ..
          # Get the path of the modified files
          CHANGED_FILES=$(echo "${{ steps.verify-changed-files.outputs.changed_files }}")
          # Loop through each modified file and zip its directory
          for file in $CHANGED_FILES; do
            # Get the directory of the modified file
            CHANGED_DIR=$(dirname "$file")
            # Zip the directory of the modified file and store in the "builds" directory
            if [ ! -d "builds" ]; then
              mkdir -p builds
            fi
            cd "${CHANGED_DIR}"
            zip -r "../../builds/${CHANGED_DIR}.zip" .
            cd ..
          done
      
      - name: Upload Builds Artifact
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: builds/



  aws:
    name: "AWS"
    runs-on: ubuntu-latest
    needs: build_go
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Builds Artifact
        uses: actions/download-artifact@v2
        with:
          name: builds
      
      - name: Check branch name
        id: branch-check
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # crear rol para olga y trabajar con ese rol
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

        # CAMBIAR LOS NOMBRES DE LOS BUCKETS DE S3 Y LA REGION
      - name: Upload to S3
        uses: keithweaver/aws-s3-github-action@v1.0.0
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        with:
          command: cp
          source: builds/*
          destination: s3://${{ steps.branch-check.outputs.branch == 'main' && 'olgaproduction' || steps.branch-check.outputs.branch == 'develop' && 'olgadevelop' || 'Invalid branch name' }}/builds/
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-1


  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: aws
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.9
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Plan Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # modificar el apply para que aplique en develop o main
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
