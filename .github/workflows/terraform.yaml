name: "Terraform"

on:
  # bloquear las branches de main y develop para que no se puedan pushear directamente
  pull_request:
    branches: [ main, develop ]

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      AWS_REGION: us-east-1
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.9
          terraform_wrapper: false

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # crear rol para olga y trabajar con ese rol
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Check for modified lambdas
        id: check_changes
        run: |
          CHANGES=$(git diff --name-only HEAD^ HEAD)
          echo "::set-output name=changes::$CHANGES"

      - name: Zip Lambda function
        if: ${{ contains(steps.check_changes.outputs.changes, 'lambdas/') }}
        id: zip_lambda
        run: |
          LAMBDA_PATH=$(git diff --name-only HEAD^ HEAD | grep lambdas/ | head -1)
          LAMBDA_NAME=$(basename "$LAMBDA_PATH" .py)
          echo "Lambda function $LAMBDA_NAME has been modified"
          zip -r "$LAMBDA_NAME.zip" "$LAMBDA_PATH"

      - name: Upload zip file to S3
        if: steps.zip_lambda.result == 'success'
        run: |
          aws s3 cp "${{ steps.zip_lambda.outputs.lambda_name }}.zip" "s3://${{ github.ref == 'refs/heads/main' && 'olgaproduction' || 'olgadevelop' }}-my-bucket/${{ steps.zip_lambda.outputs.lambda_name }}.zip"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
